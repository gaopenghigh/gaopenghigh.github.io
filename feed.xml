<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.3.0">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2016-12-05T15:30:17+08:00</updated><id>//</id><title type="html">做美好的人，做酷的事</title><subtitle>记录所学所想
</subtitle><entry><title type="html">Mesos 源码学习(1) Mesos Master 的启动</title><link href="/mesos/2016/12/05/01_master_start.html" rel="alternate" type="text/html" title="Mesos 源码学习(1) Mesos Master 的启动" /><published>2016-12-05T11:00:00+08:00</published><updated>2016-12-05T11:00:00+08:00</updated><id>/mesos/2016/12/05/01_master_start</id><content type="html" xml:base="/mesos/2016/12/05/01_master_start.html">&lt;p&gt;Mesos Master 启动相关的代码在 &lt;code class=&quot;highlighter-rouge&quot;&gt;src/master/main.cpp&lt;/code&gt; 中。&lt;/p&gt;

&lt;h2 id=&quot;flags-&quot;&gt;解析 flags 参数&lt;/h2&gt;

&lt;p&gt;通过解析以 &lt;code class=&quot;highlighter-rouge&quot;&gt;MESOS_&lt;/code&gt; 开头的环境变量，来初始化一些参数，并验证参数的合法性。
具体的参数参考 &lt;a href=&quot;http://mesos.apache.org/documentation/latest/configuration/&quot;&gt;Mesos Configuration&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&quot;libprocess&quot;&gt;初始化 libprocess&lt;/h2&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// This should be the first invocation of `process::initialize`. If it returns
&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// `false`, then it has already been called, which means that the
&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// authentication realm for libprocess-level HTTP endpoints was not set to the
&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// correct value for the master.
&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;&quot;master&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;READWRITE_HTTP_AUTHENTICATION_REALM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;READONLY_HTTP_AUTHENTICATION_REALM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;EXIT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EXIT_FAILURE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;The call to `process::initialize()` in the master's &quot;&lt;/span&gt;
                       &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;`main()` was not the function's first invocation&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;其中，&lt;code class=&quot;highlighter-rouge&quot;&gt;process::initialize()&lt;/code&gt; 定义在 &lt;code class=&quot;highlighter-rouge&quot;&gt;3rdparty/libprocess/include/process/process.hpp&lt;/code&gt; 中：&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/**
 * Initialize the library.
 *
 * **NOTE**: `libprocess` uses Google's `glog` and you can specify options
 * for it (e.g., a logging directory) via environment variables.
 *
 * @param delegate Process to receive root HTTP requests.
 * @param readwriteAuthenticationRealm The authentication realm that read-write
 *     libprocess-level HTTP endpoints will be installed under, if any.
 *     If this realm is not specified, read-write endpoints will be installed
 *     without authentication.
 * @param readonlyAuthenticationRealm The authentication realm that read-only
 *     libprocess-level HTTP endpoints will be installed under, if any.
 *     If this realm is not specified, read-only endpoints will be installed
 *     without authentication.
 * @return `true` if this was the first invocation of `process::initialize()`,
 *     or `false` if it was not the first invocation.
 *
 * @see [glog](https://google-glog.googlecode.com/svn/trunk/doc/glog.html)
 */&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;readwriteAuthenticationRealm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;readonlyAuthenticationRealm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;version-process&quot;&gt;初始化 Version process&lt;/h2&gt;

&lt;h2 id=&quot;firewall-rules&quot;&gt;初始化 firewall rules&lt;/h2&gt;

&lt;h2 id=&quot;section&quot;&gt;加载模块&lt;/h2&gt;

&lt;h2 id=&quot;anonymous-modules&quot;&gt;Anonymous modules&lt;/h2&gt;

&lt;h2 id=&quot;hooks&quot;&gt;Hooks&lt;/h2&gt;

&lt;h2 id=&quot;allocator&quot;&gt;Allocator&lt;/h2&gt;

&lt;h2 id=&quot;registry-storage&quot;&gt;Registry storage&lt;/h2&gt;

&lt;h2 id=&quot;state&quot;&gt;State&lt;/h2&gt;

&lt;h2 id=&quot;master-contendor-and-detector&quot;&gt;Master contendor and detector&lt;/h2&gt;

&lt;h2 id=&quot;authorizer&quot;&gt;Authorizer&lt;/h2&gt;

&lt;h2 id=&quot;slave-removal-rate-limiter&quot;&gt;Slave removal rate limiter&lt;/h2&gt;

&lt;h2 id=&quot;master-process&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Master&lt;/code&gt; process&lt;/h2&gt;</content><summary type="html">Mesos Master 启动相关的代码在 src/master/main.cpp 中。</summary></entry><entry><title type="html">Mesos 源码学习(0) libprocess 简介</title><link href="/mesos/2016/12/05/00_libprocess.html" rel="alternate" type="text/html" title="Mesos 源码学习(0) libprocess 简介" /><published>2016-12-05T10:00:00+08:00</published><updated>2016-12-05T10:00:00+08:00</updated><id>/mesos/2016/12/05/00_libprocess</id><content type="html" xml:base="/mesos/2016/12/05/00_libprocess.html">&lt;h1 id=&quot;libprocess&quot;&gt;什么是 &lt;code class=&quot;highlighter-rouge&quot;&gt;libprocess&lt;/code&gt;&lt;/h1&gt;

&lt;p&gt;Mesos 底层依赖于 libprocess 库，该库用 C++ 实现了 Actor 模式，不过它不叫 actor，而叫做 process。&lt;/p&gt;

&lt;p&gt;Libprocess 的几个主要特征是：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;没有异常&lt;/li&gt;
  &lt;li&gt;没有 NULL&lt;/li&gt;
  &lt;li&gt;不用用户自己管理内存&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Libprocess 还提供了不同服务之间远程调用方式，依赖于 HTTP。
也就是每个 process 会监听一个端口，提供 HTTP 服务，调用方最终是通过发送一个 HTTP 请求来调用，返回值也是通过 HTTP 返回来获得。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;没有异常&lt;/h2&gt;

&lt;p&gt;通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;Try&amp;lt;T&amp;gt;&lt;/code&gt; 代替异常：&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Try&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;EXIT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;null&quot;&gt;没有 NULL&lt;/h2&gt;

&lt;p&gt;通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; 代替 NULL：&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isNone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;EXIT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;None&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-1&quot;&gt;不需要自己管理内存&lt;/h2&gt;

&lt;p&gt;通过使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;Owned&amp;lt;T&amp;gt;&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Owned&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Libprocess 库中通过“引用计数的指针(reference counted pointers)”来自己实现内存管理，不需要用户操心。&lt;/p&gt;

&lt;h2 id=&quot;tryt--optiont--resultt&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Try&amp;lt;T&amp;gt;&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; 可以组合成 &lt;code class=&quot;highlighter-rouge&quot;&gt;Result&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;基本上，&lt;code class=&quot;highlighter-rouge&quot;&gt;Result&amp;lt;T&amp;gt;&lt;/code&gt; 相当于 &lt;code class=&quot;highlighter-rouge&quot;&gt;Try&amp;lt;Option&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt;。例如：&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Forward declarations.
// Try&amp;lt;Option&amp;lt;string&amp;gt;&amp;gt; readline();
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;readline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Try&amp;lt;Option&amp;lt;int&amp;gt;&amp;gt; numify(Try&amp;lt;Option&amp;lt;string&amp;gt;&amp;gt; s);
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Try&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;EXIT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Use ‘42’ for none.
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;process-&quot;&gt;process 特性&lt;/h1&gt;

&lt;p&gt;Libprocess 中的 Actor 叫做 &lt;code class=&quot;highlighter-rouge&quot;&gt;process&lt;/code&gt;，可以向一个 process 发送各种消息。主要特性：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;每个 process 拥有一个 PID；&lt;/li&gt;
  &lt;li&gt;本地消息通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;delay&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;defer&lt;/code&gt; 实现；&lt;/li&gt;
  &lt;li&gt;可以通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;promises/futures&lt;/code&gt; 进行函数式的组合；&lt;/li&gt;
  &lt;li&gt;远程消息通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;send&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;route&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;install&lt;/code&gt; 实现；&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;任意时刻，在一个 process 内只有一个线程在执行，这样就无需在 process 内部做同步：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Processes provide execution contexts (only one thread executing within
a process at a time so no need for per process synchronization).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;process--1&quot;&gt;一个 process 的生命周期&lt;/h2&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyProcess&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Process&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyProcess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;MyProcess&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;spawn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;terminate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;pid&quot;&gt;PID&lt;/h2&gt;

&lt;p&gt;每一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;process&lt;/code&gt; 拥有一个 PID，libprocess 的使用者只需要知道这个 PID，而不需要维护这个 process 的引用（指针）。&lt;/p&gt;

&lt;p&gt;由于最终是基于 HTTP 的，PID 实际上代表的也就是一个 URL，比如：&lt;code class=&quot;highlighter-rouge&quot;&gt;http://ip:port/name/endpoint&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;例：&lt;/p&gt;
&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;QueueProcess&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;spawn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;PID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;QueueProcess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;QueueProcess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enqueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;terminate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-2&quot;&gt;本地消息&lt;/h2&gt;

&lt;h3 id=&quot;dispatch-&quot;&gt;通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch&lt;/code&gt; 异步地调用一个函数/方法&lt;/h3&gt;

&lt;p&gt;相当于把一个消息传给一个 process：&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SomeProcess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;someMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;每个 process 有一个“消息队列”，
例：&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;QueueProcess&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Process&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;QueueProcess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;enqueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dequeue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;QueueProcess&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;spawn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;QueueProcess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enqueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;QueueProcess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enqueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;43&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;terminate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;delay-&quot;&gt;通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;delay&lt;/code&gt; 延迟地调用一个函数/方法&lt;/h3&gt;

&lt;p&gt;和 &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch&lt;/code&gt; 类似，但调用会推迟一段时间，例如：&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Seconds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;QueueProcess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enqueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;promisesfutures-&quot;&gt;通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;promises/futures&lt;/code&gt; 进行函数式的组合&lt;/h3&gt;

&lt;p&gt;Future 是针对调用方说得，表示一个可能还没有完成的异步任务的结果，需要在“未来”才能取到值。&lt;/p&gt;

&lt;p&gt;Promise 是针对任务执行方来说的，可以在 promise 上设置任务的结果。
可以把 promise 理解为一个可写的，可以实现一个 future 的单一赋值容器。&lt;/p&gt;

&lt;p&gt;Future 是对结果“读”的一端。Promise 是对结果“写”的一方。&lt;/p&gt;

&lt;p&gt;例：&lt;/p&gt;
&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typename&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;QueueProcess&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Process&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;QueueProcess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Future&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dequeue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;future&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;enqueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Future&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;QueueProcess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dequeue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;QueueProcess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enqueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;await&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;对于 future，通过 &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;then&lt;/code&gt;&lt;/strong&gt; 和回调函数，调用方无需显式地调用 wait 等阻塞方法。例：&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Future&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;QueueProcess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dequeue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;QueueProcess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enqueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Use ‘i’.
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// OR use bind
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dequeueReady&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;类似的回调函数还有 &lt;code class=&quot;highlighter-rouge&quot;&gt;Future::onReady&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Future::onFailed&lt;/code&gt; 等。&lt;/p&gt;

&lt;h3 id=&quot;defer--process-&quot;&gt;通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;defer&lt;/code&gt; 让回调函数在某个 process 中执行&lt;/h3&gt;

&lt;p&gt;Future 中注册回调函数，其执行是同步的，也就是说会在完成任务（实现了 future）的那个线程执行，这有可能会阻塞。
&lt;code class=&quot;highlighter-rouge&quot;&gt;defer&lt;/code&gt; 提供了一种机制，可以把回调函数异步地执行。&lt;/p&gt;

&lt;p&gt;来自&lt;a href=&quot;https://github.com/apache/mesos/blob/master/3rdparty/libprocess/README.md&quot;&gt;Libprocess Developer Guide&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;defer&lt;/code&gt; is similar to &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch&lt;/code&gt;, but rather than
enqueing the execution of a method or function on the specified
process immediately (i.e., synchronously), it returns a &lt;code class=&quot;highlighter-rouge&quot;&gt;Deferred&lt;/code&gt;,
which is a callable object that only after getting &lt;em&gt;invoked&lt;/em&gt; will
dispatch the method or function on the specified process. Said another
way, using &lt;code class=&quot;highlighter-rouge&quot;&gt;defer&lt;/code&gt; is a way to &lt;em&gt;defer&lt;/em&gt; a &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;例子：&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ProcessBase&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;spawn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;Deferred&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deferred&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;[](&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 通过 defer，这个回调会在 `process` 所在的那个线程中执行
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// Invoked _asynchronously_ using `process` as the execution context.
&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;future&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deferred&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;future&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([](&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 没有使用 defer，则回调会在任务完成后，马上在执行任务的那个线程执行
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// Invoked synchronously from the execution context of
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// the thread that completes the future!
&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Executes both callbacks synchronously, which _dispatches_
&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// the deferred lambda to run asynchronously in the execution
&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// context of `process` but invokes the other lambda immediately.
&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;terminate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-3&quot;&gt;远程消息&lt;/h2&gt;

&lt;h3 id=&quot;process--name&quot;&gt;process 的 name&lt;/h3&gt;

&lt;p&gt;Process 可以有一个 name，比如创建一个 name 为 “queue” 的 process:&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;QueueProcess&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Process&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;QueueProcess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;QueueProcess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ProcessBase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;queue&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;route--install--process-&quot;&gt;通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;route&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;install&lt;/code&gt; 为 process 添加远程消息的“路由”&lt;/h3&gt;

&lt;p&gt;由于消息都是基于 HTTP 的，所以我们需要为 process 设置不同的“路由”，来处理不同的消息。&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;QueueProcess&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Process&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;QueueProcess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;QueueProcess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ProcessBase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;queue&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/enqueue&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Parse argument from 'request.query' or 'request.body'.
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;enqueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;install&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;route&lt;/code&gt; 类似，使用方法有所不同：&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;QueueProcess&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Process&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;QueueProcess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;QueueProcess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ProcessBase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;queue&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;enqueue&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Parse argument from 'body'.
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;enqueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;send-&quot;&gt;通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;send&lt;/code&gt; 来实现消息传递（远程方法调用）&lt;/h3&gt;

&lt;p&gt;调用方事实上等价于这样的 HTTP 请求：&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl localhost:1234/queue/enqueue?value&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;42
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Libprocess 为调用方提供了 &lt;code class=&quot;highlighter-rouge&quot;&gt;send&lt;/code&gt; 方法：&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;QueueProcess&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Process&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;QueueProcess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;QueueProcess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ProcessBase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;queue&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;enqueue&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;some response&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;protobuf&quot;&gt;使用 protobuf&lt;/h3&gt;

&lt;p&gt;Libprocess 还支持使用 protobuf 来承载 payload:&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;protobuf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Protocol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EnqueueRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EnqueueResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;enqueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SomeProcess&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Process&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SomeProcess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;EnqueueRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;enqueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;onFailed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;defer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}))&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;onReady&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;defer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EnqueueResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// Use response.
&lt;/span&gt;            &lt;span class=&quot;p&quot;&gt;}));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;section-4&quot;&gt;参考资料&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.dropbox.com/s/9lgwzgy74gxn0w9/libprocess.pdf?dl=0&quot;&gt;libprocess&lt;/a&gt;： 这是 libprocess 和 Mesos 原作者 Benjamin Hindman 对于 libprocess 的介绍。&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://codetrips.com/2015/06/28/581/&quot;&gt;libprocess – an Actor-based inter-process communication library&lt;/a&gt;: 提供了一个例子。&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/apache/mesos/blob/master/3rdparty/libprocess/README.md&quot;&gt;Libprocess Developer Guide&lt;/a&gt;: 里面详细介绍了 &lt;code class=&quot;highlighter-rouge&quot;&gt;defer&lt;/code&gt; 使用。&lt;/li&gt;
&lt;/ul&gt;</content><summary type="html">什么是 libprocess</summary></entry><entry><title type="html">《重新定义团队：谷歌如何工作》读书笔记</title><link href="/reading/2016/12/04/%E9%87%8D%E6%96%B0%E5%AE%9A%E4%B9%89%E5%9B%A2%E9%98%9F-%E8%B0%B7%E6%AD%8C%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0.html" rel="alternate" type="text/html" title="《重新定义团队：谷歌如何工作》读书笔记" /><published>2016-12-04T11:10:00+08:00</published><updated>2016-12-04T11:10:00+08:00</updated><id>/reading/2016/12/04/%E3%80%8A%E9%87%8D%E6%96%B0%E5%AE%9A%E4%B9%89%E5%9B%A2%E9%98%9F:%E8%B0%B7%E6%AD%8C%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0</id><content type="html" xml:base="/reading/2016/12/04/%E9%87%8D%E6%96%B0%E5%AE%9A%E4%B9%89%E5%9B%A2%E9%98%9F-%E8%B0%B7%E6%AD%8C%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0.html">&lt;p&gt;写于 2016-12-04 。&lt;/p&gt;

&lt;p&gt;这本书的作者拉兹洛·博克是 Google 的首席人才官，他试图通过这本书告诉读者 Google 是如何做到把最优秀的人才聚集在一起并让他们开心工作的。&lt;/p&gt;

&lt;p&gt;人才的管理过程实际上也就是企业文化的发展过程。这本书给我印象最深的一点，就是他们无论做什么样的决策，背后都是有数据在支撑，这些数据是以科学的方式或精心设计的实验采集到的。没有空穴来风，没有拍脑袋。事实上优秀的人才也只会相信用科学方法得到的结论。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;成为一名创始人&lt;/h3&gt;

&lt;p&gt;作者认为优秀团队的起点是一位创始人：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;任何人都有能力成为一名创始人，也可以成为所在团队的文化创造者。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;创世人的心理认同，和拥有这家公司多少股份没有关系。创始人是团队的核心，是团队中最有影响力的人，代表着团队的文化。&lt;/p&gt;

&lt;p&gt;我们大部分人其实很难有机会亲自创建一家公司，大部分人是所谓的“打工者”。但从另一方面来说，人的一生，本身就像是一个创业的过程，我们每个人，都是自己人生的创始人。创始人的心态，能让人为自己负责，让自己变得更优秀。把自己看成是创始人，并且像创始人一样行到，这个过程就是把自己打造成一个团队最有影响力的人的过程，也是自己逐渐拥有一个团队的过程，是让自己和团队一起进步的过程。&lt;/p&gt;

&lt;p&gt;好的公司文化能促进员工成为团队的创始人。比如 Google 愿意把决定权给普通员工，信息默认开放等。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;文化决定战略&lt;/h3&gt;

&lt;p&gt;决定一个公司决定该做什么不该做什么的，应该是好的企业文化，而不是利润率。伟大长久的公司都不会把赚钱放在第一位。&lt;/p&gt;

&lt;p&gt;个人也是如此，我们不应该过短视的单纯物质决定一切的人生，应该有内在的追求，有诗和远方，这才是人之所以为人的原因。人生中的每一个重要选择，都应该和自己的核心价值观一致，这个价值观应该是能让人变得越来越好的，像好的艺术一样，让人“离开物性，脱出兽性，超越欲念而趋向高明”（朱青生）。&lt;/p&gt;

&lt;p&gt;公司需要有自己的愿景和文化，每个团队也如此，每个个人也如此。创立并且践行这个文化的每一个人，都是创始人。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;招聘更好的人，宁缺毋滥&lt;/h3&gt;

&lt;p&gt;作者花了很多的篇幅强调招聘的重要性，Google 的原则是宁缺毋滥。打造一个优秀的团队很费功夫，而让团队瓦解却只需要一颗老鼠屎。&lt;/p&gt;

&lt;p&gt;招聘是一种艺术，大部分人并不像他们以为的那样擅长做面试官。当我们面试别人时，往往答案在最初的三分钟就有了，后面的27分钟，只是我们有意无意地想办法证实我们最初的结论。显然，这并不科学。作为面试官，我们要提醒自己不要陷入这种现有结论在求证的思维方式，不要相信自己的直觉。另一方面当我们作为面试者时，第一印象非常重要。&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;提升员工的幸福感&lt;/h3&gt;

&lt;p&gt;人在醒着的大部分时间，都是在工作。所以工作不应该仅仅是工作本身，还应该成为人们得到幸福感的方式之一。阿里巴巴提倡的一句话我很认同：“认真生活，快乐工作”。我认为人力资源的核心工作就是两条：招聘优秀的人，让员工感到更幸福。&lt;/p&gt;

&lt;p&gt;提升幸福感没有捷径，只能靠一点一滴的细节，站在员工而非管理者的立场来考虑问题，该慷慨的时候应该毫不犹豫地慷慨。&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;绩效管理的关键：内在动机、野心、公开、反馈&lt;/h3&gt;

&lt;p&gt;绩效管理是很难的一个东西，绩效管理是很难的一个东西，一方面每个人都恨它，另一方面又找不到更好的方式。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;绩效应该是内在动机的产物&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;人们做事情的动机，分为内在动机和外在动机。内在动机就是指自己真的想做这件事，是事情本身吸引我们。而外在动机表示是事物之外的那些东西让我们去做这件事。内在动机能让我们有更好的表现、感受到更多的自我认同感和幸福感。&lt;/p&gt;

&lt;p&gt;人们不喜欢绩效的一点就是它往往成为外在动机：升职加薪。Google 的做法是把薪酬职称与绩效考核分开。我不知道这种方式实现起来到底有多少作用，但至少我们可以努力让自己和团队的绩效跟多地来自于内在动机。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;绩效目标应该足够有野心&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;只有想得够大，才能激发出潜力和创新。好的平衡是通过努力，绩效目标能完成70%。绩效考核，也应该看工作本身，而不是看绩效目标有没有完成。我们应该是为了实现一件事而工作，而不是变成为了完成绩效目标而工作。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;绩效目标应该公开&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这也是信息默认公开的一部分，每一个人的绩效目标，都应该可以被所有其他人看到。一方面，让大家更了解彼此在做什么以及自己的角色，另一方面也能让我们在设定绩效目标之时更多地想一想这件事到底有什么价值。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;绩效目标应该可以得到及时的反馈&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;最有效的学习方式是“刻意练习”，其中关键的一点就是及时反馈，形成“练习-反馈-调整”的良性循环。敏捷开发就是一种快速反馈的方式。绩效的完成情况也应该能够得到及时的反馈，及时调整。关于绩效评估的方式，Google 采用的是依靠一个委员会，并且提供申诉的渠道。&lt;/p&gt;

&lt;h3 id=&quot;section-5&quot;&gt;个人能力的幂律分布&lt;/h3&gt;

&lt;p&gt;组织中大多数的个人表现，不是正态分布，而是幂律分布。提高团队整体效能最有效的方法，就是着重管理最优员工和最差员工。&lt;/p&gt;

&lt;p&gt;最主要的贡献都来自于少数的精英员工，这也是为什么我们招聘是应该宁缺毋滥。最优员工带来的价值，往往是平均值得很多倍，这应该体现在他们的薪酬上。薪酬奖励体系追求的不是公平，而是&lt;strong&gt;公正&lt;/strong&gt;。贡献大的人得到更多，所有人都心服口服。&lt;/p&gt;

&lt;p&gt;表现差的员工不一定真的是能力不行或者态度有问题（不然他们不应该被招聘进来），往往只是他们遇到了一些问题，管理者以及整个团队的文化应该去帮助这些遇到问题的人，把问题找出来分析解决。简单地解雇不仅有害于团队文化，带来的新招聘成本也远大于帮助遇到问题的人。但是当一个人真的不应该继续留在团队时（体现在大家都不愿意与他共事），应该毫不犹豫地让他离开。&lt;/p&gt;

&lt;h3 id=&quot;section-6&quot;&gt;建立创新的混沌&lt;/h3&gt;

&lt;p&gt;创新来源于混沌之中，来源于人员、思想的互相流动和碰撞。要产生创新，就应该建立并且维护这种混沌。同样的道理，Google 前 CEO 在《重新定义公司：谷歌是如何运营的》一书中也说过：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;创意的开发应该是一个有机的过程。一个个想法冒出来，好似在一片原始混沌之中产生的基因突变一般，经过漫长而曲折的过程后，终于实现了蜕变。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;混沌是混乱有有序的平衡，是一个动态的过程。一个组织乃至一个人最好的状态不是安稳，而是处于一个动态的越来越好的变化中，所以理解并接受一定程度上的混乱和杂质，是一个健康的组织和一个健康的人应该拥有能力。&lt;/p&gt;

&lt;h3 id=&quot;section-7&quot;&gt;企业内部行为政策应当助推企业文化&lt;/h3&gt;

&lt;p&gt;一方面作为人类，我们自认为是理性的，有独立思考能力，另一方面，进化心理学的一些列实验表明，我们的大脑还很大程度地保持着原始的状态。所以我们需要一系列行为和政策地&lt;strong&gt;助推&lt;/strong&gt;。只要有实验和数据表明某种措施能够更有利于大家都相信的文化，那就应该考虑施行这项措施，哪怕看起来是无关紧要或者是毫不相关的事。&lt;/p&gt;

&lt;h3 id=&quot;section-8&quot;&gt;马上行动&lt;/h3&gt;

&lt;p&gt;书的最后，作者给出了每家公司都可以马上行动的一些事：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;赋予工作意义&lt;/li&gt;
  &lt;li&gt;相信员工&lt;/li&gt;
  &lt;li&gt;只聘用比你更优秀的人&lt;/li&gt;
  &lt;li&gt;不要将职业发展与管理绩效混为一谈&lt;/li&gt;
  &lt;li&gt;关注团队的两端 – 最优员工和最差员工&lt;/li&gt;
  &lt;li&gt;既要节俭又要慷慨&lt;/li&gt;
  &lt;li&gt;不公平薪酬&lt;/li&gt;
  &lt;li&gt;助推&lt;/li&gt;
  &lt;li&gt;管理日益提神的期望&lt;/li&gt;
&lt;/ol&gt;</content><summary type="html">写于 2016-12-04 。</summary></entry><entry><title type="html">《重新定义公司：谷歌是如何运营的》读书笔记</title><link href="/reading/2016/12/03/%E9%87%8D%E6%96%B0%E5%AE%9A%E4%B9%89%E5%85%AC%E5%8F%B8-%E8%B0%B7%E6%AD%8C%E6%98%AF%E5%A6%82%E4%BD%95%E8%BF%90%E8%90%A5%E7%9A%84-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0.html" rel="alternate" type="text/html" title="《重新定义公司：谷歌是如何运营的》读书笔记" /><published>2016-12-03T23:52:00+08:00</published><updated>2016-12-03T23:52:00+08:00</updated><id>/reading/2016/12/03/%E3%80%8A%E9%87%8D%E6%96%B0%E5%AE%9A%E4%B9%89%E5%85%AC%E5%8F%B8:%E8%B0%B7%E6%AD%8C%E6%98%AF%E5%A6%82%E4%BD%95%E8%BF%90%E8%90%A5%E7%9A%84%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0</id><content type="html" xml:base="/reading/2016/12/03/%E9%87%8D%E6%96%B0%E5%AE%9A%E4%B9%89%E5%85%AC%E5%8F%B8-%E8%B0%B7%E6%AD%8C%E6%98%AF%E5%A6%82%E4%BD%95%E8%BF%90%E8%90%A5%E7%9A%84-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0.html">&lt;p&gt;写于 2016-12-03 。&lt;/p&gt;

&lt;p&gt;最近对管理学感兴趣，于是找来这本 Google 前 CEO 埃里克·施密特写的《如何定义公司：谷歌是如何运营的》。Google 是 21 世纪以来最成功的公司之一，一直以来给人的印象都是“酷”，对于一家拥有几万雇员的大公司，很不容易。一家公司应该如何运营，才能在赚钱的同时，赢得大家的由衷的尊重？这是我想从这本书里面得到的。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;第一章 文化：相信自己的口号&lt;/h3&gt;

&lt;p&gt;现在的企业越来越注重企业口号、愿景和价值观的确立，但是单纯有口号并没有什么用。重要的是要让员工相信公司的口号，也要让公司外的人相信这家公司的员工相信他们自己的口号。Google 最出名的口号莫过于“不作恶”，他们相信着这个口号，于是最终撤出了中国。作为对比，百度的愿景是“让人们最平等、便捷地获取信息，找到所求”，听起来很好，但一系列的事件体现出来，百度的高管和普通员工们并没有真的相信自己的口号。挣钱当然很重要，但真的不应该放在第一位。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;职能部门还是事业部?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;国内很多公司都拆分成了一个个事业部，理论上各个事业部自负盈亏，希望由此让公司反应更快、业务更垂直、少一些政治多一些效率。而 Google 一直以来都是按职能划分部门，因为他们认为：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;以业务或产品线为基础的组织结构会造成“各成一家”的局势，从而对人员和信息的自由流动形成扼制。每个部门自负盈亏看似有利于衡量业绩，却会使各业务部门的领导者把自己部门的盈亏置于企业整体利益至上，从而对部门的发展方向造成误导。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;拆还是不拆，这是个很难权衡的问题。按职能划分，的确更容易让各层员工的利益与公司整体利益重合，但代价就是慢，互联网时代唯快不破，相比利益分歧，我自己觉得慢更致命。也许最好的方式仍然是拆，但事业部之间不是隔离的，而是互相交融互相支撑的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;领导者和管理者&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;管理者和领导者的角色经常会被弄混。一个组织需要围绕领导者建立，领导者可能是管理者，也可能不是。但引导者一定是组织内最有影响力的人物。领导者不依赖与岗位或经验，领导力建筑在工作表现和工作热情上。热情是领导者最重要的特质之一。NBA 2015-2016赛季的总冠军金州勇士队，最好的球员是史蒂芬·库里，但真正的领导者，是追梦·格林，把他推到领导位置的，是他的热情：强硬、鼓励、吼叫和垃圾话。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;第二章 战略：你的计划是错误的&lt;/h3&gt;

&lt;p&gt;风投喜欢连续创业者，因为最看重的不是项目，而是人。项目和环境随时都在变，而正确的人能够根据环境的变化做出最好的调整和决策。&lt;/p&gt;

&lt;p&gt;每年年初的时候都要制定年度工作计划，甚至是年度绩效目标。然而每年年末回顾时会发现，现实情况和年初预计的以及天差地别。&lt;/p&gt;

&lt;p&gt;真正有效的计划只能在战略级别，而且是长时间的战略。比如当移动时代来临时决定把重心放在移动上，比如个人的发展上坚持基础知识的学习。真正可执行的计划，在互联网时代，很难在半年后还有效。所以好的计划是动态的，往往是一个目标，具体的行动应当根据当时的情况动态生成。不记得是从哪里看来的，战争中最有效的指令不是告诉士兵应该怎么做，而是告诉他们这么做的目的，因为战场形势变化太快，最有效的战术是根据实际情况和平时的训练当场作出的。&lt;/p&gt;

&lt;p&gt;无论是企业计划还是个人计划，在制定之初我们就应该相信，这个计划肯定会变的，计划就应该随时调整。但目标不应该是经常变的。小的时候自己经常指定各种学习计划，指定计划时信心满满，但往往坚持不了几天，最终一方面没有达到目的，一方面又失望于自己没有遵循计划。现在想来，问题出在自己不知道实时调整计划。在计划的实施过程中如果发现很难，就说明这个计划不够好，这时就应该调整。好的计划是让人能通过一定限度的努力达到的，不能太简单，也不能太难。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;第三章 招聘是你最重要的工作&lt;/h3&gt;

&lt;p&gt;作者认为，招聘的目的就是找到最优秀的人才，哪怕暂时没有与此人相匹配的职位。优秀的人适应性很强，他们能够快速掌握那些自己不擅长或从没有做过的事务。Google 在招聘时，相比已掌握的知识，更看重潜力。&lt;/p&gt;

&lt;p&gt;对于个人的发展也类似，经验和具体的知识过时得很快，最终决定一个人能力的，一是基础知识，这些知识过时得比较慢；二是学习能力，通过持续的学习训练，一个人的学习能力应该越来越快；三是软技能，尤其是与人打交道的能力，这是很难再短期内培养出来的。&lt;/p&gt;

&lt;p&gt;Google 认为给一个面试者打平均分（3分）的面试官不合格，因为这是逃避的表现，要么通过，要么失败，平均分只是把这个决定推给了别人。另外，Google 还认为录用的决定权不应该教给用人部门的经理，而应该教给一个“中立”的团队。直接经理往往更注重那些可以拿来即用的人，相比下来，这些技能的时效性更短，而招聘委员会则会跟注重那些基础和潜力更优秀的人，也就是更注重一些长久而言对公司更有用的人。&lt;/p&gt;

&lt;p&gt;优秀的人不会让自己埋没在枯燥平庸之中，Google 的应对措施，就是不断用新的想法保持他们工作的趣味性。&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;第四章 决策：共识的真正含义&lt;/h3&gt;

&lt;p&gt;书中讲到了几个做决策的要点，说到底是要用科学的方法来做决策：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;决策的基础是数据，数据来源于科学的收集和针对性的实验。&lt;/li&gt;
  &lt;li&gt;最好的决策时正确的决策，而非大家一致同意的决策，也不是领导人自己的决策。&lt;/li&gt;
  &lt;li&gt;管理者需要为决策设置最后期限&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-4&quot;&gt;第五章 沟通：当最牛的路由器&lt;/h3&gt;

&lt;p&gt;施密特认为“最有能力的管理者不但不独霸信息，还会分享信息”，就像一个路由器。&lt;/p&gt;

&lt;p&gt;信息分享的结果是信息透明，要达到这个目的，就要信任员工，预设公司的员工都是好的，知道什么东西该对外保密。这样每一个员工都能够知道高管们都在做什么，公司最近的计划是什么，自己在这个计划中承担什么样的责任。基层员工知道自己不仅仅是在砌墙，更是在建造一座教堂。&lt;/p&gt;

&lt;p&gt;通过信息透明，不同层级的员工更容易达成共识，更容易找到利益重合点，而这正是高效的基础。另外，信息的分享还是创新的源泉。&lt;/p&gt;

&lt;h3 id=&quot;section-5&quot;&gt;第六章 创新：缔造原始的混沌&lt;/h3&gt;

&lt;p&gt;施密特认为，创新的途径有很多种，Android 的开放和 iOS 的封闭就是两种截然不同的创新，它们都很成功。但是创新的源泉是统一的，它们来自于混沌。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;创意的开发应该是一个有机的过程。一个个想法冒出来，好似在一片原始混沌之中产生的基因突变一般，经过漫长而曲折的过程后，终于实现了蜕变。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;混沌是混乱有有序的平衡，是一个动态的过程。一个组织乃至一个人最好的状态不是安稳，而是处于一个动态的越来越好的变化中，所以理解并接受一定程度上的混乱和杂质，是一个健康的组织和一个健康的人应该拥有能力。&lt;/p&gt;

&lt;p&gt;Google 员工喜欢给自己设立一个“大目标”，因为只有目标足够大，才能激发出真正的创新。当然再大的目标也要切合实际，一个合适的目标，是那些最终完成了 70% 的目标。&lt;/p&gt;</content><summary type="html">写于 2016-12-03 。</summary></entry><entry><title type="html">《枪炮、病菌与钢铁》读书笔记：世界为什么是这样</title><link href="/reading/2016/12/03/%E6%9E%AA%E7%82%AE-%E7%97%85%E8%8F%8C%E4%B8%8E%E9%92%A2%E9%93%81-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0.html" rel="alternate" type="text/html" title="《枪炮、病菌与钢铁》读书笔记：世界为什么是这样" /><published>2016-12-03T10:20:00+08:00</published><updated>2016-12-03T10:20:00+08:00</updated><id>/reading/2016/12/03/%E3%80%8A%E6%9E%AA%E7%82%AE%E3%80%81%E7%97%85%E8%8F%8C%E4%B8%8E%E9%92%A2%E9%93%81%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0</id><content type="html" xml:base="/reading/2016/12/03/%E6%9E%AA%E7%82%AE-%E7%97%85%E8%8F%8C%E4%B8%8E%E9%92%A2%E9%93%81-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0.html">&lt;p&gt;写于 2016-12-03 。&lt;/p&gt;

&lt;p&gt;这本书试图在千年和万年的时间粒度上，解释这个世界为什么是我们现在看到的样子。为什么是欧洲人“发现”了美洲，为什么人类的发源地非洲在文明的发展上落后于欧亚大陆，为什么阿兹特克帝国的人们最终都没有发明出轮子，而在欧亚大陆在公元前3200年就在使用轮子和车子了。&lt;/p&gt;

&lt;p&gt;作者认为，造成各大陆差异性的，是环境的差异。总结全书，主要有三方面的原因。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;一是各大陆可以用于驯化的野生动植物的差异。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;首先当然要气候有规律，其次又需要地理上丰富的差异但又不能造成地理阻隔，这样产生足够多的植物种类，人类才有可能在其中找到为数不多的集中可以驯化为粮食的植物。
这决定了粮食最早出现的地点是新月沃地和中国，有了粮食，更多的人口能够聚集起来，而人口是社会、宗教、政治、经济和军事发展最核心的基础。&lt;/p&gt;

&lt;p&gt;非洲虽然有众多的大型哺乳动物，但它们的习性决定了没法被人驯化。美洲和澳大利亚的大型哺乳动物，在人类踏上这块大陆不久，就几乎全部灭绝了。这很有可能是人类捕猎的结果。到现在为止为数不多的集中驯化了的大型动物，全都来自欧亚大陆。阿兹特克帝国没有发明轮子，直接的原因就是他们用不上，因为没有可以拉车的动物。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;二是各大陆文明传播和迁移速度的差异。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;欧亚大陆是东西向的主轴线，非洲和美洲都是南北向的，澳大利益则是孤立在太平洋上。文明的传播，依赖于地理，尤其是维度导致的气候差异。动植物在同纬度的地域扩张是容易的，但要跨越温带和热带完全不同的气候，则基本不可能。除了维度，高山和沙漠也是形成文明传播阻隔的主要因素。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;三是各大陆人口和面积上的差异。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;所谓的“人口红利”。更多的人口意味着跟多的社群、更多的差异化、更丰富的交流和更强的竞争。这位创新发明提供了更好的环境，因为落后的社群往往会被先进的对手所淘汰。欧亚大陆作为最大的大陆，没有很大的地理阻隔，无数的社群在这块大陆上产生、交流、演变或淘汰，最终导致文明在这里得到最快的发展。&lt;/p&gt;

&lt;p&gt;但并不是人口越多越好，重要的是多样性。中国的地理位置足够优越、人口也足够多，但还是从明朝开始了没落。作者认为，原因在于中国的多样性不够。中国作为一个统一的中央集权国家发展了两千年，导致广袤的土地上，人们说同一种语言、信仰同一种价值观，周边也没有什么可以竞争的社会。这就导致中国逐渐失去了创新发明的环境，整个社会的容错性和自纠错能力大大下降。对比欧洲，一直以来都是上百个小型的社会，他们之间互相交流互相竞争。最终后果就是大航海诞生于欧洲而不是中国。而大航海觉得了近代世界的走向。&lt;/p&gt;

&lt;p&gt;其实不仅是人类整体，我们每个个体的发展，也深深依赖于我们所处的环境。人人生而不平等。但相对于群体，个体有更大的可能冲破环境给我们的限制。在《智识分子》一书中，万维刚定义了他心目中的英雄，j就是那些超越了阶级的人，这一点我很赞同：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;所谓英雄，就是超越了阶级出身、超越了周围环境、超越了性格局限，拒绝按照任何设定好的程序行事，不能被大数据预测，给世界带来惊喜，最不像机器人的人。&lt;/p&gt;
&lt;/blockquote&gt;</content><summary type="html">写于 2016-12-03 。</summary></entry><entry><title type="html">《卓有成效的管理者》读书笔记</title><link href="/reading/2016/11/20/%E5%8D%93%E6%9C%89%E6%88%90%E6%95%88%E7%9A%84%E7%AE%A1%E7%90%86%E8%80%85-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0.html" rel="alternate" type="text/html" title="《卓有成效的管理者》读书笔记" /><published>2016-11-20T21:12:08+08:00</published><updated>2016-11-20T21:12:08+08:00</updated><id>/reading/2016/11/20/%E3%80%8A%E5%8D%93%E6%9C%89%E6%88%90%E6%95%88%E7%9A%84%E7%AE%A1%E7%90%86%E8%80%85%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0</id><content type="html" xml:base="/reading/2016/11/20/%E5%8D%93%E6%9C%89%E6%88%90%E6%95%88%E7%9A%84%E7%AE%A1%E7%90%86%E8%80%85-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0.html">&lt;p&gt;写于 2016-11-20。&lt;/p&gt;

&lt;p&gt;我认为管理的核心在于&lt;strong&gt;找到并扩大人与人之间的共同利益&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;创始人的个人利益可能和公司的利益有 80% 的重合度，而普通基层员工和公司的利益重合度可能只有 30%。好的项目当然会给公司带来收益，这就是共同利益，但除此之外，员工更关心的是项目给自己个人带来的收益，薪水、成就感、职称、个人能力等等。如果一件事情能给员工带来很大的切身利益，那员工就会去做，哪怕这件事情对员工的经理而言没有什么效益，对公司而言甚至可能是有害的。大公司的发展往往会失控，自然而然地分崩离析，原因之一就在于随着人越来越多，部门与公司、经理与总监、员工与经理、基层与高层之间的利益重合度越来越低。&lt;/p&gt;

&lt;p&gt;公司与员工，上级与下级的关系，形式上是雇佣，实质上是合作。大家分工协作，各自从中得到自己想要的利益。员工的工作态度消极，说明好好工作能给员工自己带来的东西太少，他觉得上班仅仅是为了老板打工，仅仅是为了拿点薪水。有时员工觉得自己在努力工作创造了很多价值，但经理觉得员工拿出来的结果根本不是自己想要的东西，这就是因为经理和员工之间没有就他们的共同利益达成一致。所谓将心比心，换位思考，目的就是理解并找到对方的利益点。&lt;/p&gt;

&lt;p&gt;围绕着扩大共同利益这个核心，可以发展出各种管理者之道。彼得·德鲁克在《卓有成效的管理者》一书中，提出了优秀管理者应该具备的 5 种素质。尽管从现代的眼光来看，这些素质已经成了大家耳熟能详的一些观点，但现实工作中，能做到这 5 点的并不多。而且这些素质，不只是对管理者有效，对于普通的员工，对于所有的知识性工作者，都很有指导意义。好的东西不会轻易过时。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;第一，掌控自己的时间。&lt;/h3&gt;

&lt;p&gt;每个人最稀缺的资源就是自己的时间，高效地工作，用节省下来的时间来关注家庭、提高自己或者是从事任何自己感兴趣的事情，这都比低效率的工作有意义得多。说到底，对于绝大部分人来说，工作是生活的一部分，本质上是希望通过工作让自己的生活得更好，无论是物质报酬还是成就感，都是为了让有限的人生更精彩更幸福。&lt;/p&gt;

&lt;p&gt;要掌控自己的时间，首先就要知道自己的时间花在了什么地方。我们都知道自己的世界应该怎么去用，但往往不知道我们的时间到底是怎么被用掉的。一旦知道了真相，调整就有据可循了。最有效的办法就是记录时间的使用情况，关键在于及时和客观。做一件事情的当下，就把这件事情以及花费的时间记录下来。不要依靠会议，大脑是不可靠的。这会是一件有些枯燥的事，而一旦坚持足够长的时间，就能由此对自己有更清楚的认识，接下啦的决策、计划、调整也会更符合自己的特质，因而会更有效。&lt;/p&gt;

&lt;p&gt;今年我的个人目标就是每天写日记，记录自己每一天的所做所学所想。通过这个简单的活动，我自己就能明显地体会到对自己的认识更深入了，自己更变得更上进、也更容易发现并且纠正那些不对的地方。但目前写日记靠的是每天结束后的回忆，这种方式还是不够及时。准备试一试每天做事情时马上记录，一天结束后再回顾总结的方式。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;第二，把眼光集中在贡献上。&lt;/h3&gt;

&lt;p&gt;优秀的管理者，能够跳出事务本身的维度来看待一件事。这要求梳理掉那些错综复杂的细节，让背后的本质暴露出来，这就是最终的贡献。一件事该不该做，做得怎么样，就看这最终的贡献怎么样。&lt;/p&gt;

&lt;p&gt;平时的工作中，往往是做得太多，想的太少，结果白费了很多力气在那些本质上没什么贡献的事情上。包括学习一个东西，最有效的方式是刻意练习，而不是简单重复。这事实上也是要求我们把眼光集中在贡献上，真正有贡献的是刻意的专门设计的练习以及及时的反馈，去关注这些事情，其他的都不重要。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;第三，用人所长。&lt;/h3&gt;

&lt;p&gt;这一点中国历史上有太多例子了。知人善任、因材施教，关键就在于会看人，大多数人，总需要一些时间的共处，才知道一个人的长处短处。慧眼识人，依靠的就是平时一点一点的观察和思考，这其实也是一种训练，越到后来越能在更短的时间看清一个人。用人所长要求领导者能灵活应变，眼光集中在贡献上，就能知道什么东西能变，应该怎么变才能让一个人发挥出最大的能力。&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;第四，要事优先。&lt;/h3&gt;

&lt;p&gt;这一点和第二点类似。最难得部分在于说“不”。不仅仅是拒绝，有时候也是放弃。但为了做好最重要的时，这些拒绝和放弃都是值得的，最终得到的利益也会更大。还是那句话，做一件事情时，应该多花时间想一想，到底有多大的意义。如果确定有意义，那就花更多的时间把它做好，哪怕为此放弃掉其他同样有所收益，但相比不那么重要的事。&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;第五，做决策。&lt;/h3&gt;

&lt;p&gt;领导者最核心的工作就是做决策。好的决策并没有什么有据可循的方式方法，但也有一些共通之处：
	1. 透过现象看到本质。与其做 100 个针对 100 个事件的决策，不如好好分析一下这些事件是不是只是表象，是不是背后有一个更深刻的原因。
	2. 承认自己的无知。可怕的不是不懂，而是自以为很懂实际上不懂。好的决策往往需要很多方面的知识，人有限的精力不可能完全掌握。
	3. 听取各方面的意见。人不可避免地会有偏见。所以要听取各种不同的声音，尤其是与自己的理解对立的声音。有些声音有理有据，有些声音很片面或者根本是错误的，这时不要简单地抛弃这些声音，而是应该想一想，是什么样的原因，导致这些人产生这样的看法。&lt;/p&gt;

&lt;p&gt;管理学有很多很空的东西，但也有一些真知灼见。但总体而言，这是一门依靠实践的学问，在实际的工作中多看多想，才能发展出最合适的管理方法。&lt;/p&gt;</content><summary type="html">写于 2016-11-20。</summary></entry><entry><title type="html">《乡土中国》读书笔记</title><link href="/reading/2016/10/17/%E4%B9%A1%E5%9C%9F%E4%B8%AD%E5%9B%BD-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0.html" rel="alternate" type="text/html" title="《乡土中国》读书笔记" /><published>2016-10-17T21:12:08+08:00</published><updated>2016-10-17T21:12:08+08:00</updated><id>/reading/2016/10/17/%E3%80%8A%E4%B9%A1%E5%9C%9F%E4%B8%AD%E5%9B%BD%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0</id><content type="html" xml:base="/reading/2016/10/17/%E4%B9%A1%E5%9C%9F%E4%B8%AD%E5%9B%BD-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0.html">&lt;p&gt;写于 2016-10-17。&lt;/p&gt;

&lt;p&gt;这本书成书于西南联大时期，距今70年了。这么久远的书，又是关于社会学，必然有很多过时的理论（比如书中关于计划经济的信心）。但至今仍被视为经典，就在于费孝通在书中提出了中国社会一个很本质的特征：&lt;strong&gt;差序格局&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;差序格局，以及乡土中国的一切特征，都基于一个事实：中国人多以农耕为业，地在哪里，人固定在哪里。土气是因为不流动导致的。&lt;/p&gt;

&lt;p&gt;所谓差序格局，“好像把一块石头丢在水面上所发生的一圈圈推出去的波纹。每个人都是他社会影响所拖出去的圈子的中心。被圈子的波纹所推及的就发生联系。每个人在某一时间某一地点所动用的圈子是不一定相同的”。&lt;/p&gt;

&lt;p&gt;涟漪可大可小，中国的家庭的规模也可以有巨大的伸缩性。费孝通认为，中国人特别对世态炎凉有感触，就是应为我们的社会圈子会因中心的势力变化而扩大缩小很多很多。人与人之间的合作，靠的是&lt;strong&gt;人情&lt;/strong&gt;，互相欠着人情，所以需要往来，进而形成了合作。&lt;/p&gt;

&lt;p&gt;作者举了一些例子来说明差序格局在中国文化中的核心地位。比如子曰：“何以报德？以直报怨，以德报德”。再比如“修身、齐家、治国、平天下，就是从中心逐渐向外。“克己复礼”，温良恭俭让、孝悌忠信等传统道德观，都是以个人问中心，向外辐射的。&lt;/p&gt;

&lt;p&gt;与中国社会的差序格局不同，西方社会体现的是“团体格局”。团体中每个成员的关系是相等的，团体的核心是一个超越每个个体的核心价值观。所谓领导，只是这个核心价值的“代理者”。比如牧师是上帝的代理者，政府是宪法中自由、平等、民主等价值观的代理者。&lt;/p&gt;

&lt;p&gt;由于个人中心，没有超越个体的核心价值，导致中国文化中的很多概念没有方式能够直接表达出来，只能借助各种各样的比喻。比如说“仁”时要回归到“孝悌忠信”，说“天下”时要回归到“君臣、父子、夫妇、昆弟、朋友”。&lt;/p&gt;

&lt;p&gt;由于固定、不流动，导致形成一个“熟悉”的社会，没有陌生人的社会。这就导致了契约和法律在乡土社会中无从发生。因为契约和法律是为陌生人之间的合作产生的。乡土社会的信用，靠的是不需要思考的熟悉性。缺乏变化的生活、长期的教育已经把外在的规则化成了内在的习惯。虽然法律存在，但维持秩序的是文化中的良心，即所谓&lt;strong&gt;礼治&lt;/strong&gt;。礼治注重修身、克己，理想状态下不必有外在的监督。&lt;/p&gt;

&lt;p&gt;政治的作用被&lt;strong&gt;教化&lt;/strong&gt;取代。权利是分工体系的产物，乡土社会变化很少，文化是稳定的，教化很大程度上替代了政治的作用，因为没有什么是经验和传统解决不了的。社会变迁加快时，传统的方法不足以应付当前的问题，于是教化的力量变弱。&lt;/p&gt;</content><summary type="html">写于 2016-10-17。</summary></entry><entry><title type="html">《漫谈中国艺术》读书笔记</title><link href="/reading/2016/09/27/%E6%BC%AB%E8%B0%88%E4%B8%AD%E5%9B%BD%E8%89%BA%E6%9C%AF-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0.html" rel="alternate" type="text/html" title="《漫谈中国艺术》读书笔记" /><published>2016-09-27T21:32:00+08:00</published><updated>2016-09-27T21:32:00+08:00</updated><id>/reading/2016/09/27/%E3%80%8A%E6%BC%AB%E8%B0%88%E4%B8%AD%E5%9B%BD%E8%89%BA%E6%9C%AF%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0</id><content type="html" xml:base="/reading/2016/09/27/%E6%BC%AB%E8%B0%88%E4%B8%AD%E5%9B%BD%E8%89%BA%E6%9C%AF-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0.html">&lt;p&gt;写于 2016-09-27。&lt;/p&gt;

&lt;p&gt;这实际上不是一本书，只是把几个学者在电视节目中的演讲整理成文字，然后做成了一本电子书。不过其中《悲剧在中国的诞生》和《这就是现代艺术》两篇还比较有意思，值得思考一下。&lt;/p&gt;

&lt;h1 id=&quot;section&quot;&gt;一 《悲剧在中国的诞生》&lt;/h1&gt;

&lt;p&gt;刘东讲述了他眼中的悲剧。&lt;/p&gt;

&lt;p&gt;什么是悲剧？&lt;/p&gt;

&lt;p&gt;悲剧的最基本特征在于它不可调和的矛盾，以及由此导致的无可回避的悲惨结局。&lt;/p&gt;

&lt;p&gt;人们为什么需要悲剧？&lt;/p&gt;

&lt;p&gt;刘东认为，感受悲剧的过程是对人们日常平淡生活的一次中断、一次警醒、一次陌生化。悲剧结束之时，人们开始唏嘘不已地重新检省一系列至关重要的人生问题，而这些问题往往已经被人们遗忘在日常琐事中了。这些人生问题可能是永远不能解释出来的，而我们就必须借助某些形式（比如悲剧）来试图去解释，以此来赋予我们生活一点意义。&lt;/p&gt;

&lt;p&gt;上升到文明的层面，刘东认为：“任何一个堪称正常的人类文明，都势必要赋予人生某种意义。从而任何一个堪称伟大的文明，其真正伟大之处，也恰恰在于它势必要解释开人生的虚妄和荒诞，以便创造出独特的意义空间和生活世界来，让人类在其中慰藉平生、足堪一活。从这个意义上，检验一个文明伟大与否，恰恰要看它是否能正视人生的危机，又不被这种危机所压垮，而能在自身的历史进程中不断尝试去重新处理它，把它摆在一个可以控制的合理位置。”&lt;/p&gt;

&lt;p&gt;从这个角度来看待历史，那么“历史的发展路径，从来就只能是将错就错，我们也只能利用自己有限的生命、有限的自由，去将错就错地对历史进行再创造，在无意义之中勉为其难地重构一个足以容纳我们的意义世界。”&lt;/p&gt;

&lt;p&gt;这些话说得真好。&lt;/p&gt;

&lt;h1 id=&quot;section-1&quot;&gt;二 《这就是现代艺术》&lt;/h1&gt;

&lt;p&gt;朱青生老师的通选课《艺术史》，是我在北大4年上过的最好最有启发的课，没有之一。也正是由于朱青生，我才会搜索到和这本书来读。这门课在全校最大的一间教室上，上课时全场像看电影一样灯光全关，只有讲台上坐着的朱青生老师，白色的PPT背景，简单地放着着他自己拍的各种照片。朱老师有一种能力，他没有讲稿，却能通过他的语言，一点一点让人安静下来，让人进入到另外一个世界，让人看看什么是艺术，感受一下艺术带给我们的东西。我上课的那个学期，讲的是文艺复兴。印象最深的是朱老师说他认为最优艺术性的作品是中国的书法。他告诉我们，最好的艺术作品，最打动人们的，往往不是艺术作品本身表达出来的东西，而是作者在创作这件作品时的心境，这份心境渗透到了作品里面，千年之后仍然影响着每一个人。&lt;/p&gt;

&lt;p&gt;朱青生认为艺术家往往会想办法引人关注，并非只是想表现自己，主要是向人民展现，在寻常之外还有什么值得被关注和思索的可能性。&lt;/p&gt;

&lt;p&gt;什么是现代艺术，其意义是什么？&lt;/p&gt;

&lt;p&gt;朱青生认为现代艺术的主要目的是帮助我们觉悟。所谓觉悟，就是进入到人的内心，让人不是跟着固定的标准或者固定的想法走，而是回到自己，从自己的心里面慢慢长出自己来。现代艺术不是答案，也不是引导人们解决什么问题，而是把问题放在每个人心里，让每个人自己提问自己回答。我们精神上已经有了很多的负担、规则、未经思考和判断就接受下来的成见， 如果现在能把它们慢慢地一层一层地去掉，我们心灵就会为之而澄明。从这个角度上来说，现代艺术就是自我清除。通过艺术这种方式，引人离开物性，脱出兽性，超越欲念而趋向高明。&lt;/p&gt;

&lt;p&gt;朱青生还有一本书，叫《没有人是艺术家，也没有人不是艺术家》。他认为，艺术家的身份在今天已经成为一种人人都可以拥有的自由选择。现代艺术提供了这样一种可能性：人们可以通过一种活动，与问题直接遭遇，并借着自己的行为、幻想乃至妄想，进入到一个不可知的领域，享受自己内心的自由和人性的完整。&lt;/p&gt;</content><summary type="html">写于 2016-09-27。</summary></entry><entry><title type="html">《必然》读书笔记</title><link href="/reading/2016/09/25/%E5%BF%85%E7%84%B6-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0.html" rel="alternate" type="text/html" title="《必然》读书笔记" /><published>2016-09-25T10:39:00+08:00</published><updated>2016-09-25T10:39:00+08:00</updated><id>/reading/2016/09/25/%E3%80%8A%E5%BF%85%E7%84%B6%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0</id><content type="html" xml:base="/reading/2016/09/25/%E5%BF%85%E7%84%B6-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0.html">&lt;p&gt;写于 2016-09-26。&lt;/p&gt;

&lt;p&gt;凯文凯利的《必然》这本书，讲的是他眼中世界的趋势。作者认为，科技在本质上有所“偏好”，这种偏好形成了一个流层，世界的种种变化都发生在流层之上。理解流层本身的属性，有时候比掌握具体的事物重要。比如对世界影响最大的东西之一：科学。科学本质上是一套方法，是对流层的描述。&lt;/p&gt;

&lt;p&gt;KK提出了12个互相关联起来的趋势。&lt;/p&gt;

&lt;h3 id=&quot;becoming&quot;&gt;（一） 形成（Becoming）&lt;/h3&gt;

&lt;p&gt;核心观点就是热力学第二定律。在整个宇宙熵增的过程中，由于自组织的存在，人类文明得以逆流形成一道熵减发展过程，而且这个过程正在加速。每个人在每一年遇到的新事物会越来越多，我们处于一个“形成”的时代，新的东西不断形成，而每种具体的事物的生命周期都在缩短，每个人都是菜鸟。所以，只能通过对方法、思维的升级训练，才能够在这个加速变化的世界中掌握主动权。&lt;/p&gt;

&lt;p&gt;所以见识很重要，尤其是自己专业之外的见识。专业上具体的东西，很有可能是会快速迭代的甚至彻底改变的，唯一不变的是自己的思维模式、方法论和学习能力。有机会就多走出去多感受多经历，没机会就多看书，两方面的书特别重要，一是各个领域的通识书，二是历史书。为自己培养出一套思维和方法论的体系。千万不能把自己局限于某个细分的领域。&lt;/p&gt;

&lt;h3 id=&quot;cognifying&quot;&gt;（二） 知化（Cognifying）&lt;/h3&gt;

&lt;p&gt;人工智能将在我们的生活将发挥越来越多的作用，广度上，不同特质的人工智能将深入我们日常生活几乎所有的方面，深度上，人工智能讲越来越“智能”。数百种不同特质的人工智能和人类智能紧密结合在一起，解决更多的问题。人工智能将从事大部分目前由人类从事的工作，当然更多种类的工作也会产生出来，这些工作需要的是“人性”。通过人工智能，我们能更好地定义人性–我们到底是谁。人工智能当然是智能，甚至有可能发展出意识，但这和人类的意识是截然不同的两种东西，也没有可比性。不能说“人性”比“AI性”高级，各有各的方式，各自代表不同形式。&lt;/p&gt;

&lt;p&gt;我自己并不觉得“奇点”会来，我觉得，最终人类智慧和AI都会发现，我们之间是互补的，是整体大于个体之和的，我们会变得互相依存，最终没有什么纯粹的人类智慧，也没有什么纯粹的AI。&lt;/p&gt;

&lt;h3 id=&quot;flowing&quot;&gt;（三） 流动（Flowing）&lt;/h3&gt;

&lt;p&gt;一切事物都在流动， 从个体、批次、独立和一次性向着连续、服务、组合和持续性发展。流动的本质是速度的加快：当足够快、足够及时时，一个个独立的个体就表现出了流动性。基于科技和制度的进步，陌生人之间更加相信彼此，愿意把自己的未来建立在对别人的信任之上。&lt;/p&gt;

&lt;h3 id=&quot;screening&quot;&gt;（四） 屏读（Screening）&lt;/h3&gt;

&lt;p&gt;屏幕，无论是普通屏幕还是VR、AR，将成为我们获取信息和交流的最主要方式。是人与人、人与AI间交互的最主要接口。越来越多的物品都会带上屏幕，这基本上已经是事实而非预测了。有望改变这个事实的，只能寄希望于脑科学发展到能让人们“直接”感受了。借助屏幕，借助数字化，人们事实上能让书发挥出它本来就应该拥有的能力，如KK所说：“书是一种变化，是思考、写作、研究、编辑、改变、分享、社交、知化、祝贺、营销、进一步分享、屏读等动作的持续流动。被人批注、标注、标记、收藏、总结、参考、链接、分享、传播，才是书籍长久以来真正想要的。&lt;/p&gt;

&lt;h3 id=&quot;accessing&quot;&gt;（五） 使用（Accessing）&lt;/h3&gt;

&lt;p&gt;这个世界上的物品越来越多，我们每一天接触到的物品也越来越多，停留在大部分物品上的时间都很少。于是世界的发展越来越走向“使用”而非“拥有”。越来越多的产品会以服务的形式提供出来。人们真正拥有的，可能是那些深度定制过、或者是能提供非常特别体验的东西。&lt;/p&gt;

&lt;p&gt;现在越来越多的DIY店和私人订制服务，正是体现了这种趋势。未来，实体书可能会很贵，因为买一本精装实体书就像现在去买一把青铜剑一样，更多地是收藏和品鉴了。&lt;/p&gt;

&lt;h3 id=&quot;sharing&quot;&gt;（六） 共享（Sharing）&lt;/h3&gt;

&lt;p&gt;世界正在朝着去中心化的方向发展。人们通过共享和合作，能产生出大于中心化组织的能量，整体优于部分之和，1+1&amp;gt;2。&lt;/p&gt;

&lt;p&gt;共享技术的目标是同时最大化个体自主性和群体协同力量，这事实上也是人类文明进化的方向之一。个人自主性让人们觉得自由，觉得幸福，但简单地把自由的个体集中到一起只会带来混乱最终崩溃。健康的制度、方法和文化的发展目标，就是在提升每个人的生活质量的同时，增加整体的力量。&lt;/p&gt;

&lt;p&gt;KK还认为硬件资源也会朝着去中心化发展，所以可能会形成由几亿个个人计算节点组成的计算集群。去中心化不代表没有中心，事实上需要有一层薄而权威的中心，才能使整个系统不至于崩溃。这就是所谓自上而下的智慧。毕竟更接近真理的还是少数人，群体性的行为往往是幼稚荒诞的。&lt;/p&gt;

&lt;p&gt;共享不代表无偿，事实上，只有对每个人有明确收益的共享组织，才能生存下来，靠理想和情怀支持不了多久。&lt;/p&gt;

&lt;h3 id=&quot;filtering&quot;&gt;（七） 过滤（Filtering）&lt;/h3&gt;

&lt;p&gt;前面几条都建立在同一个前提上：物质和信息越来越丰富。问题是人类的精力有限。现代时候最值钱的，就是人们集中精力的时间。所以我们需要各种各样的过滤系统，帮助我们不至于淹没在信息和物质的洪流中。&lt;/p&gt;

&lt;p&gt;目前的过滤器，有一个致命的问题，即所谓“过适（overfitting）”。过滤器会让我们进入一个以自我为中心的漩涡，从而对任何与标准存在细微差别的事情都会被排除在外， 即使我们原本可能会喜欢它。一个结论就是现在社会就存在的各种圈子。每个圈子中的人只看得到自己圈子的事，因为其他事情都被过滤了，于是以为这个世界就这么大，就这么几种人类。显然这种过适会使人们的思维变得僵化。也再一次印证了见识是有多么的重要。&lt;/p&gt;

&lt;p&gt;更有用的过滤器会逐渐学习，会保持开放，会和其他过滤器交流融合。&lt;/p&gt;

&lt;h3 id=&quot;remixing&quot;&gt;（八） 重混（Remixing）&lt;/h3&gt;

&lt;p&gt;物质和信息越来越多，通过过滤器，我们可以把东西拆分为零散的元素，而在这些元素上的再创造（Remixing），将创造出更多，也有可能是更好的东西出来。&lt;/p&gt;

&lt;p&gt;软件工程已经初步有这样的感觉，大家通过把各种各样的工具、模块、系统组合链接起来，成为一个新的定制化的系统。&lt;/p&gt;

&lt;p&gt;重混趋势带来的一个附带趋势就是，产品和事物会更加朝着模块化接口化发展，让拆解和重混都更容易。&lt;/p&gt;

&lt;h3 id=&quot;interacting&quot;&gt;（九）互动（Interacting）&lt;/h3&gt;

&lt;p&gt;这一章的核心观点就是虚拟现实技术讲有巨大的发展，讲改变人与机器、人与人之间的交互方式。&lt;/p&gt;

&lt;p&gt;人类交互方式的发展，基本上是传说、口头、书信、照片、声音、视频，技术趋势是越来越能模拟真实的就在眼前的对象。视频在向前一步，当然就是VR，再向前，就是全息VR。到那时，距离给我们带来的不便以及很小，生活中的绝大部分时候，我们不会有距离的概念。人们也不用聚在一起工作，因为这和在家里通过VR工作是一模一样的。&lt;/p&gt;

&lt;h3 id=&quot;tracking&quot;&gt;（十） 追踪（Tracking）&lt;/h3&gt;

&lt;p&gt;越来越多的人类活动将会被追踪记录。身体情况、行为、社交、一切一切。通过这些记录还原的自己，比我们自以为的更接近真实的自己。这些记录，将成为很多判断的依据。而且很大一部分还会成为半公开的，人类分享的冲动胜过保持隐私的愿望。&lt;/p&gt;

&lt;p&gt;具体事情的记忆不在那么重要，因为一切都被记录下来了，通过搜索，我们几乎可以把经历过的任何事情重温一遍。当然在脑科学发展到能直接记录和产生感觉之前，感觉本身还是不能被记录的。而那之后，人类文化将会有一次重大的变化，因为文化生长的基础之一就是时光一去不复返，而当我们能还原感觉时，我们就一定程度上地得到了时间旅行的能力。&lt;/p&gt;

&lt;h3 id=&quot;questioning&quot;&gt;（十一） 提问（Questioning）&lt;/h3&gt;

&lt;p&gt;在互联网时代，人们似乎变得更加浮躁、更加肤浅。KK觉得事实上并没有，我们只是改变了几百年来固有的方式。一切都更快，每一个动作都几乎能够得到及时的反馈，越来越多的陌生人之间的写作，越来越多的基础设施让人们能够自由地获取和表达。换句话说，我们的选择拓宽了，KK认为“更多的自由、选择和机遇是我们进步的基础，也是人性和个人幸福的基础“。人们看起来似乎总是在做一些没有深度、浪费时间、碎片化的事，然而这就是这个时代最有效率的方式，快速地获取、快速地反馈、快速的推翻和重来，每个人都比过去得到了多得多的信息，也有多得多的机会形成和表达自己的想法，这些想法又会作用于其他人。&lt;/p&gt;

&lt;p&gt;之前一段时间，自己也会认为世界越来越浮躁了，我们需要静下心来，但现在更明白，浮躁只是表象，底下是每个人思考力的提高，而通过建立自己的过滤器，通过对事物发展过程的理解，我们就能从浮躁中得到很多有价值的东西，这比浮躁社会来临之前容易得多。&lt;/p&gt;

&lt;p&gt;答案变得越来越廉价，问题则变得越来越有意义。因为一个问题的提出，就是从另外一个角度看待事物，是创新的源头。KK说：”一个好问题是机器将要学会的最后一样东西“。&lt;/p&gt;

&lt;h3 id=&quot;beginning&quot;&gt;（十二） 开始（Beginning）&lt;/h3&gt;

&lt;p&gt;这一章，作者对更远的未来做了猜想。整个地球、整个人类文明将成为一个整体，每一个个人，每一个AI都是其中的一部分，对此我们知道，但却没办法感受到整体意识的感受。现在，就是这个进程的开始。&lt;/p&gt;</content><summary type="html">写于 2016-09-26。</summary></entry><entry><title type="html">《自控力》读书笔记</title><link href="/reading/2016/09/18/%E8%87%AA%E6%8E%A7%E5%8A%9B-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0.html" rel="alternate" type="text/html" title="《自控力》读书笔记" /><published>2016-09-18T21:04:00+08:00</published><updated>2016-09-18T21:04:00+08:00</updated><id>/reading/2016/09/18/%E3%80%8A%E8%87%AA%E6%8E%A7%E5%8A%9B%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0</id><content type="html" xml:base="/reading/2016/09/18/%E8%87%AA%E6%8E%A7%E5%8A%9B-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0.html">&lt;p&gt;写于 2016-09-18。&lt;/p&gt;

&lt;p&gt;总结全书，提高自控力的核心方法有三点：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;接受自己。不要试图与自我较量，而是学会接受自身的冲突和矛盾，接受自己本来就是一个复杂的个体。&lt;/li&gt;
  &lt;li&gt;看清目标。每一天都要想一想自己的目标是什么，自己的行为是否和目标一致，如果不一致的话，想一想是什么原因，不要有任何的负罪感，从当下开始进行改变就好。不要让自己淹没在周围人中，他们是他们，自己是自己。&lt;/li&gt;
  &lt;li&gt;集中注意力。时刻提醒自己不要被大脑的原始模式控制了，要靠理性的判断。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;每一章的笔记如下。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;一、自控力是可以训练培养的&lt;/h3&gt;

&lt;p&gt;自控的关键，在于认识到自己的自控力存在问题。
自控力就是驾驭“我要做”、“我不要”和“我想要”这三种力量。&lt;/p&gt;

&lt;p&gt;和通常所以为的相反，对于自控力来说，原始的恐惧和欲望很重要。
“没有了欲望，人们就会变得沮丧；如果没有了恐惧，人们就没法保护自己、原理伤害。”
强大的自控力，要充分利用这些原始本能，而不是和其斗争。&lt;/p&gt;

&lt;p&gt;大脑是不断变化的， 也就意味着它是可以训练的，“如果你每天都让大脑学数学，它就会越来越擅长数学，如果你让它忧虑，它就会越来越忧虑，如果你让它专注，它就会云越来越专注”。&lt;/p&gt;

&lt;p&gt;冥想训练让人们所做的事情，其实正是每个人生活中所要面对–把自己的注意力收回，专注于最初的目标。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;二、自控力是一种生理本能&lt;/h3&gt;

&lt;p&gt;自控力是一种生理本能，和压力一样，大脑进化出自控力来保护自己。所以很大程度上，自控力源自于本能。现实生活中，一个很有效的方法就是让自己放慢速度、冷静下来，“三思而后行”，自控的行为可能自然而然就形成了。&lt;/p&gt;

&lt;p&gt;锻炼能有效改善自控力。每次锻炼的时间不用长，只要是一个自己觉得舒适的时间即可，比如5分钟。锻炼的强度也不用很剧烈，只要身体在动就要，追求的是身心和谐一致。&lt;/p&gt;

&lt;p&gt;充足的睡眠是自控力的保障。打个小盹，周末补觉都很有用。&lt;/p&gt;

&lt;p&gt;长时间的自控就像慢性压力一样，会削弱免疫系统的功能。所以适当的放松很重要。另外，压力让人关注即时的、短期的目标和结果，而自控力则需要大脑有更广阔的视野，所以学会管理压力，是提高自控力的重要组成部分。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;三、自控力像肌肉一样有极限&lt;/h3&gt;

&lt;p&gt;自控力就像肌肉一样有极限，用得太多会疲惫，但坚持训练能增强自控力。&lt;/p&gt;

&lt;p&gt;重要的事要安排在意志力最强的时候做。
可以通过控制一些以前不会控制的小事来训练自控力。
有时候只是我们感觉自控力没有了，但事实上这只是大脑的自我保护模式。
把事情绑定到那些由别人推动的事情上去，能减少自己的意志力消耗。&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;四、“善行”之后会有“恶行”&lt;/h3&gt;

&lt;p&gt;如果我们把“善行”当做是自控的结果，那么往往就无意识地为“恶行”找到了理由。&lt;/p&gt;

&lt;p&gt;“如果你去锻炼了就说自己很‘好’，没去锻炼就说自己很‘坏’，那么你很可能因为今天去锻炼了，明天就不去了。“&lt;/p&gt;

&lt;p&gt;关键在于，我们不应该以“好”和“不好”来评价自己的行为，而是应该更本质一些：用是否与自己的最终目标一致来评价。如果不一致那就想办法修正，不要用更多的价值观加在自己的行为之上。&lt;/p&gt;

&lt;p&gt;当我们想要做一些“恶行”时，慢一点，想一想自己想要这么做是不是由于之前的某个“善行”给自己开了“许可证”。不要屈从于大脑的原始行为。&lt;/p&gt;

&lt;p&gt;设定目标会让人愉悦，因为有时候大脑会对能完成目标的可能性当成真正完成了目标。这就会导致人们容易把今天该完成的事拖到明天。遇到之中情况，就要让自己清醒一下，问问自己：“我是不是想承担永远拖延下去的恶果？”&lt;/p&gt;

&lt;p&gt;总之，最关键就是认清自己，想清楚自己想要什么。&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;五、大脑会误把奖励的承诺当做快乐的保证&lt;/h3&gt;

&lt;p&gt;我们为什么容易一遍一遍地刷社交软件？
这是因为大脑会误把奖励的承诺当做快乐的保证。大脑正是靠对快乐的承诺让你不停地去狩猎、采集野果、工作和求爱，而不是让你直接感受快乐。所以，我们往往会迷恋上那些会对人产生承诺的东西上。比如社交软件的新消息，一遍一遍地刷朋友圈等等。
解决的方法，就是要区分那些让我们的生活有意义的真实奖励，和那些让我们分心上瘾的虚假奖励。&lt;/p&gt;

&lt;h3 id=&quot;section-5&quot;&gt;六、负面情绪会导致自控力下降&lt;/h3&gt;

&lt;p&gt;罪恶感并不有助于自控力，因为罪恶感往往是非黑即白，而人们往往会破罐子破摔–既然已经失败了，那就索性放纵自己吧。&lt;/p&gt;

&lt;p&gt;自我批评本身不会有很好的作用，起作用的是自我理解和自我同情。我们需要的，是理解自己之所以没有做或做了什么事情是有原因的，只不过这些行为不会有助于自己生活得美好，所以我们需要改变，就从当下开始。&lt;/p&gt;

&lt;h3 id=&quot;section-6&quot;&gt;七、即时满足感会劫持大脑&lt;/h3&gt;

&lt;p&gt;大脑是“有限理性”的，即时满足感会让大脑进入非理性状态。“即时”二字劫持了我们的大脑，扭转了我们的偏好。
解决的方法就是给自己多一点时间，让“即时满足感”不在即时，然后在看一看自己是否还那么想做或者不做什么事。&lt;/p&gt;

&lt;h3 id=&quot;section-7&quot;&gt;八、自控受到社会认同的影响&lt;/h3&gt;

&lt;p&gt;简单地说，由于镜像神经元的作用，就是自控力具有“传染性”。
应对措施依然是认清自己，每天都给自己足够的时间，想清楚自己的目标和周围人的目标有哪些不同之处，主管上告诉自己不要成为别人。&lt;/p&gt;

&lt;h3 id=&quot;section-8&quot;&gt;九、压抑自己的想法不能提高自控力&lt;/h3&gt;

&lt;p&gt;试图不去想某件事，它就会一直萦绕在我们脑海中（白熊效应）。所以对于我们大脑中的那些自己不喜欢或者不希望存在的想法，不要试图去控制它，而是直面它，理解它们存在的原因，然后用理性判断来指导行为。要与大脑里面的各种想法和平相处，而不是把它们推到一边。
就像电影《美丽心灵》中的纳什一样，接受那些东西存在，但不去相信它们。&lt;/p&gt;</content><summary type="html">写于 2016-09-18。</summary></entry></feed>
